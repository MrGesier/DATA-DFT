//@version=5
indicator("Low Frequency Fourier Transform", overlay=true, shorttitle="FFTRes_MultiUT", max_bars_back=400)

// Bollinger Bands Function
bb(src, length, mult) =>
    basis = ta.sma(src, length)
    dev = mult * ta.stdev(src, length)
    [basis + dev, basis, basis - dev]

// Bollinger Bands for Different Periods
[bb_upper_256, bb_basis_256, bb_lower_256] = bb(close, 200, 2)
[bb_upper_128, bb_basis_128, bb_lower_128] = bb(close, 100, 2)
[bb_upper_64, bb_basis_64, bb_lower_64] = bb(close, 50, 2)
[bb_upper_32, bb_basis_32, bb_lower_32] = bb(close, 25, 2)

// Plot Bollinger Bands
plot(bb_upper_256, color=color.new(color.red, 50), linewidth=1)
plot(bb_lower_256, color=color.new(color.red, 50), linewidth=1)
plot(bb_upper_128, color=color.new(color.green, 50), linewidth=1)
plot(bb_lower_128, color=color.new(color.green, 50), linewidth=1)
plot(bb_upper_64, color=color.new(color.blue, 50), linewidth=1)
plot(bb_lower_64, color=color.new(color.blue, 50), linewidth=1)
plot(bb_upper_32, color=color.new(color.purple, 50), linewidth=1)
plot(bb_lower_32, color=color.new(color.purple, 50), linewidth=1)

// Fourier Transform Utilities
pi = math.pi
fourier_transform(length) =>
    array.new_float(length, na)
    
    reX(k) =>
        result = 0.0
        for i = 0 to length - 1
            result := result + close[i] * math.cos(2 * pi * k * i / length)
        result

    imX(k) =>
        result = 0.0
        for i = 0 to length - 1
            result := result + close[i] * math.sin(2 * pi * k * i / length)
        -result

    [reX, imX]

// Example plotting of Fourier Components
line1 = fourier_transform(50)
plot(array.get(line1, 0), color=color.new(color.black, 70))
